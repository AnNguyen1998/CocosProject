1. Command Pattern
* Command Pattern là gì ?
    - Command pattern là một pattern cho phép bạn chuyển đổi một request thành một object độc lập chứa tất cả thông tin về request. 
      Việc chuyển đổi này cho phép bạn tham số hoá các methods với các yêu cầu khác nhau như log, queue (undo/redo), transtraction.
* Ưu điểm:
    - Đảm bảo nguyên tắc Single Responsibility
    - Đảm bảo nguyên tắc Open/Closed
    - Có thể thực hiện hoàn tác
    - Giảm kết nối phụ thuộc giữa Invoker và Receiver
    - Cho phép đóng gói yêu cầu thành đối tượng, dễ dàng chuyển dữ liệu giữa các thành phần hệ thống
* Nhược điểm:
    - Khiến code trở nên phức tạp hơn, sinh ra các lớp mới gây phức tạp cho mã nguồn.
* Khi nào cần sử dụng:
    - Khi cần tham số hóa các đối tượng theo một hành động thực hiện (biến action thành parameter)
    - Khi cần tạo và thực thi các yêu cầu vào các thời điểm khác nhau (delay action)
    - Khi cần hỗ trợ tính năng undo, log, callback hoặc transaction
    - Phối hợp nhiều Command với nhau theo thứ tự

2. Flyweight Pattern
* Flyweight Pattern là gì?
    - là một mẫu thiết kế cấu trúc cho phép bạn lắp nhiều đối tượng hơn vào dung lượng RAM có sẵn bằng cách chia sẻ, 
      phân phối các phần trạng thái chung - riêng giữa nhiều đối tượng thay vì giữ tất cả dữ liệu trong mỗi đối tượng.
* Ưu điểm:
    - Giảm số lương đối tượng được tạo ra bằng cách chia sẻ đối tượng. Vì vậy tiết kiệm bộ nhớ và các thiết bị lưu trữ cần thiết
    - Cải thiện khả năng cache dữ liệu vì thời gian đáp ứng nhanh
    - Tăng Performance cho hệ thống
* Nhược điểm;
    - Đánh đổi về mặt sử dụng CPU khi các flyweight object bị truy cập nhiều lần.
    - Code trở nên phức tạp hơn nhiều. Các thành viên mới trong team sẽ luôn thắc mắc tại sao trạng thái của một thực thể lại được tách ra theo cách như vậy. Độ dễ hiểu (understandability) thấp
* Khi nào cần sử dụng:
    - Khi có một số lớn các đối tượng được ứng dụng tạo ra một cách lặp đi lặp lại.
    - Khi việc tạo ra đối tượng đòi hỏi nhiều bộ nhớ và thời gian
    - Khi muốn tái sử dụng đối tượng đã tồn tại thay vì phải tối thời gian để tạo mới
    - Khi nhóm đối tượng chứa nhiều đối tượng tương tự và hai đối tượng trong nhóm không khác nhau nhiều

3. Observer Pattern
* Observer Pattern là gì ?
    - Định nghĩa mối phụ thuộc một - nhiều giữa các đối tượng để khi mà một đối tượng có sự thay đổi trạng thái, 
      tất cả các thành phần phụ thuộc của nó sẽ được thông báo và cập nhật một cách tự động.
* Ưu điểm:
    - Đảm bảo nguyên tắc Open/Closed Principle (OCP): Cho phép thay đổi Subject và Observer một cách độc lập. Chúng ta có thể tái sử dụng các Subject mà không cần tái sử dụng các Observer và ngược lại. Nó cho phép thêm Observer mà không sửa đổi Subject hoặc Observer khác.
    - Thiết lập mối quan hệ giữa các objects trong thời gian chạy.
    - Sự thay đổi trạng thái ở 1 đối tượng có thể được thông báo đến các đối tượng khác mà không phải giữ chúng liên kết quá chặt chẽ.
    - Không giới hạn số lượng Observer
* Nhược điểm:
    - Unexpected update: Bởi vì các Observer không biết về sự hiện diện của nhau, nó có thể gây tốn nhiều chi phí của việc thay đổi Subject.
    - Subscriber được thông báo theo thứ tự ngẫu nhiên.
* Khi nào cần sử dụng:
    - Sự thay đổi trạng thái ở 1 đối tượng cần được thông báo đến các đối tượng khác mà không phải giữ chúng liên kết quá chặt chẽ.
    - Cần mở rộng dự án với ít sự thay đổi nhất.
    - Khi abstraction có 2 khía cạnh, cái này phụ thuộc cái kia. Đóng gói các khía cạnh này trong các đối tượng khác nhau cho phép bạn thay đổi và tái sử dụng chúng độc lập.
    - Khi thay đổi một đối tượng yêu cầu việc thay đổi đến các đối tượng khác, và bạn không biết số lượng đối tượng cần thay đổi.
    - Khi một đối tượng thông báo các đối tượng khác mà không cần biết đối tượng đó là gì hay nói cách khác là tránh tightly coupled.

4. Singleton Pattern:
* Singleton Pattern là gì?
    - Là một design pattern đảm bảo rằng một class chỉ có duy nhất một instance
      và cung cấp một cách toàn cầu để truy cấp tới instance đó.
* Ưu điểm:
    - Có thể chắc chắn rằng một lớp chỉ có một instance
    - Có khả năng truy cập đến instance từ mọi nơi (global access)
    - Đối tượng singleton chỉ được khởi tạo duy nhất một lần khi nó được yêu cầu lần đầu.
    - Kiểm soát truy cập đến instance duy nhất
    - Giảm namespace
* Nhược điểm:
    - Vi phạm Single Responsibility Principle. Mẫu này giải quyết hay vấn đề trên cùng một thời điểm.
    - Singleton pattern có thể thể hiện thiết kế kém (bad design), chẳng hạn, khi các thành phần của chương trình biết quá nhiều về nhau.
    - Có thể sinh ra khó khăn trong việc unit test client code của Singleton bởi nhiều test frameworks dựa vào kế thừa khi sản sinh mock objects.
* Khi nào cần sử dụng:
    - Có thể chắc chắn rằng một lớp chỉ có một instance
    - Có khả năng truy cập đến instance từ mọi nơi (global access)
    - Đối tượng singleton chỉ được khởi tạo duy nhất một lần khi nó được yêu cầu lần đầu.
    - Vì class dùng Singleton chỉ tồn tại 1 Instance (thể hiện) nên nó thường được dùng cho các trường hợp giải quyết các bài toán cần truy cập vào các ứng dụng như: Shared resource, Logger, Configuration, Caching, Thread pool, …
    - Một số design pattern khác cũng sử dụng Singleton để triển khai: Abstract Factory, Builder, Prototype, Facade,…

5. State Design Pattern
* State Pattern là gì?
    - State Pattern là một mẫu thiết kế hành vi cho phép một object thay đổi hành vi của nó khi trạng thái bên trong của nó thay đổi.
* Ưu điểm:
    - Đảm bảo nguyên tắc Single Responsibility (SRP): Tách biệt mỗi State tương ứng với 1 class riêng biệt.
    - Đảm bảo nguyên tắc Open/Closed Principle (OCP): chúng ta có thể thêm một State mới mà không ảnh hưởng đến State khác hay Context hiện có.
    - Giữ hành vi cụ thể tương ứng với mỗi State (trạng thái).
    - Giúp chuyển State một cách rõ ràng.
    - Loại bỏ các câu lệnh xét trường hợp (If, Switch case) giúp đơn giản code của context
* Nhược điểm:
    - Việc sử dụng state pattern có thể quá mức cần thiết nếu state machine chỉ có một vài trạng thái hoặc hiếm khi thay đổi có thể dẫn đến việc tăng độ phức tạp của code
* Khi nào cần sử dụng:
    - Sử dụng State pattern khi bạn có một object hoạt động khác nhau tùy thuộc vào trạng thái hiện tại của nó, số lượng trạng thái là rất lớn và code của trạng thái cụ thể thường xuyên thay đổi.
    - Sử dụng State pattern khi bạn có một lớp với nhiều các điều kiện lớn làm thay đổi cách class hoạt động theo các giá trị hiện tại của các trường của class.
    - Sử dụng State Pattern khi bạn có nhiều code trùng lặp qua các trạng thái và chuyển đổi tương tự của State Pattern dựa trên điều kiện.
    - Thay đổi hành vi object dựa trên trạng thái object
    - Thay thế việc sử dụng rất nhiều điều kiện thay đổi cách lớp hành động dựa trên các giá trị của lớp